namespace Org.BouncyCastle.Crypto.Engines
{
    using Org.BouncyCastle.Crypto.Utilities;
    using System;

    public sealed class SerpentEngine : SerpentEngineBase
    {
        protected override void DecryptBlock(byte[] input, int inOff, byte[] output, int outOff)
        {
            base.X0 = base.wKey[0x80] ^ ((int) Pack.LE_To_UInt32(input, inOff));
            base.X1 = base.wKey[0x81] ^ ((int) Pack.LE_To_UInt32(input, inOff + 4));
            base.X2 = base.wKey[130] ^ ((int) Pack.LE_To_UInt32(input, inOff + 8));
            base.X3 = base.wKey[0x83] ^ ((int) Pack.LE_To_UInt32(input, inOff + 12));
            base.Ib7(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x7c];
            base.X1 ^= base.wKey[0x7d];
            base.X2 ^= base.wKey[0x7e];
            base.X3 ^= base.wKey[0x7f];
            base.InverseLT();
            base.Ib6(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[120];
            base.X1 ^= base.wKey[0x79];
            base.X2 ^= base.wKey[0x7a];
            base.X3 ^= base.wKey[0x7b];
            base.InverseLT();
            base.Ib5(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x74];
            base.X1 ^= base.wKey[0x75];
            base.X2 ^= base.wKey[0x76];
            base.X3 ^= base.wKey[0x77];
            base.InverseLT();
            base.Ib4(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x70];
            base.X1 ^= base.wKey[0x71];
            base.X2 ^= base.wKey[0x72];
            base.X3 ^= base.wKey[0x73];
            base.InverseLT();
            base.Ib3(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x6c];
            base.X1 ^= base.wKey[0x6d];
            base.X2 ^= base.wKey[110];
            base.X3 ^= base.wKey[0x6f];
            base.InverseLT();
            base.Ib2(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x68];
            base.X1 ^= base.wKey[0x69];
            base.X2 ^= base.wKey[0x6a];
            base.X3 ^= base.wKey[0x6b];
            base.InverseLT();
            base.Ib1(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[100];
            base.X1 ^= base.wKey[0x65];
            base.X2 ^= base.wKey[0x66];
            base.X3 ^= base.wKey[0x67];
            base.InverseLT();
            base.Ib0(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x60];
            base.X1 ^= base.wKey[0x61];
            base.X2 ^= base.wKey[0x62];
            base.X3 ^= base.wKey[0x63];
            base.InverseLT();
            base.Ib7(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x5c];
            base.X1 ^= base.wKey[0x5d];
            base.X2 ^= base.wKey[0x5e];
            base.X3 ^= base.wKey[0x5f];
            base.InverseLT();
            base.Ib6(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x58];
            base.X1 ^= base.wKey[0x59];
            base.X2 ^= base.wKey[90];
            base.X3 ^= base.wKey[0x5b];
            base.InverseLT();
            base.Ib5(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x54];
            base.X1 ^= base.wKey[0x55];
            base.X2 ^= base.wKey[0x56];
            base.X3 ^= base.wKey[0x57];
            base.InverseLT();
            base.Ib4(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[80];
            base.X1 ^= base.wKey[0x51];
            base.X2 ^= base.wKey[0x52];
            base.X3 ^= base.wKey[0x53];
            base.InverseLT();
            base.Ib3(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x4c];
            base.X1 ^= base.wKey[0x4d];
            base.X2 ^= base.wKey[0x4e];
            base.X3 ^= base.wKey[0x4f];
            base.InverseLT();
            base.Ib2(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x48];
            base.X1 ^= base.wKey[0x49];
            base.X2 ^= base.wKey[0x4a];
            base.X3 ^= base.wKey[0x4b];
            base.InverseLT();
            base.Ib1(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x44];
            base.X1 ^= base.wKey[0x45];
            base.X2 ^= base.wKey[70];
            base.X3 ^= base.wKey[0x47];
            base.InverseLT();
            base.Ib0(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x40];
            base.X1 ^= base.wKey[0x41];
            base.X2 ^= base.wKey[0x42];
            base.X3 ^= base.wKey[0x43];
            base.InverseLT();
            base.Ib7(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[60];
            base.X1 ^= base.wKey[0x3d];
            base.X2 ^= base.wKey[0x3e];
            base.X3 ^= base.wKey[0x3f];
            base.InverseLT();
            base.Ib6(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x38];
            base.X1 ^= base.wKey[0x39];
            base.X2 ^= base.wKey[0x3a];
            base.X3 ^= base.wKey[0x3b];
            base.InverseLT();
            base.Ib5(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x34];
            base.X1 ^= base.wKey[0x35];
            base.X2 ^= base.wKey[0x36];
            base.X3 ^= base.wKey[0x37];
            base.InverseLT();
            base.Ib4(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x30];
            base.X1 ^= base.wKey[0x31];
            base.X2 ^= base.wKey[50];
            base.X3 ^= base.wKey[0x33];
            base.InverseLT();
            base.Ib3(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x2c];
            base.X1 ^= base.wKey[0x2d];
            base.X2 ^= base.wKey[0x2e];
            base.X3 ^= base.wKey[0x2f];
            base.InverseLT();
            base.Ib2(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[40];
            base.X1 ^= base.wKey[0x29];
            base.X2 ^= base.wKey[0x2a];
            base.X3 ^= base.wKey[0x2b];
            base.InverseLT();
            base.Ib1(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x24];
            base.X1 ^= base.wKey[0x25];
            base.X2 ^= base.wKey[0x26];
            base.X3 ^= base.wKey[0x27];
            base.InverseLT();
            base.Ib0(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x20];
            base.X1 ^= base.wKey[0x21];
            base.X2 ^= base.wKey[0x22];
            base.X3 ^= base.wKey[0x23];
            base.InverseLT();
            base.Ib7(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x1c];
            base.X1 ^= base.wKey[0x1d];
            base.X2 ^= base.wKey[30];
            base.X3 ^= base.wKey[0x1f];
            base.InverseLT();
            base.Ib6(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x18];
            base.X1 ^= base.wKey[0x19];
            base.X2 ^= base.wKey[0x1a];
            base.X3 ^= base.wKey[0x1b];
            base.InverseLT();
            base.Ib5(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[20];
            base.X1 ^= base.wKey[0x15];
            base.X2 ^= base.wKey[0x16];
            base.X3 ^= base.wKey[0x17];
            base.InverseLT();
            base.Ib4(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[0x10];
            base.X1 ^= base.wKey[0x11];
            base.X2 ^= base.wKey[0x12];
            base.X3 ^= base.wKey[0x13];
            base.InverseLT();
            base.Ib3(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[12];
            base.X1 ^= base.wKey[13];
            base.X2 ^= base.wKey[14];
            base.X3 ^= base.wKey[15];
            base.InverseLT();
            base.Ib2(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[8];
            base.X1 ^= base.wKey[9];
            base.X2 ^= base.wKey[10];
            base.X3 ^= base.wKey[11];
            base.InverseLT();
            base.Ib1(base.X0, base.X1, base.X2, base.X3);
            base.X0 ^= base.wKey[4];
            base.X1 ^= base.wKey[5];
            base.X2 ^= base.wKey[6];
            base.X3 ^= base.wKey[7];
            base.InverseLT();
            base.Ib0(base.X0, base.X1, base.X2, base.X3);
            Pack.UInt32_To_LE((uint) (base.X0 ^ base.wKey[0]), output, outOff);
            Pack.UInt32_To_LE((uint) (base.X1 ^ base.wKey[1]), output, outOff + 4);
            Pack.UInt32_To_LE((uint) (base.X2 ^ base.wKey[2]), output, outOff + 8);
            Pack.UInt32_To_LE((uint) (base.X3 ^ base.wKey[3]), output, outOff + 12);
        }

        protected override void EncryptBlock(byte[] input, int inOff, byte[] output, int outOff)
        {
            base.X0 = (int) Pack.LE_To_UInt32(input, inOff);
            base.X1 = (int) Pack.LE_To_UInt32(input, inOff + 4);
            base.X2 = (int) Pack.LE_To_UInt32(input, inOff + 8);
            base.X3 = (int) Pack.LE_To_UInt32(input, inOff + 12);
            base.Sb0(base.wKey[0] ^ base.X0, base.wKey[1] ^ base.X1, base.wKey[2] ^ base.X2, base.wKey[3] ^ base.X3);
            base.LT();
            base.Sb1(base.wKey[4] ^ base.X0, base.wKey[5] ^ base.X1, base.wKey[6] ^ base.X2, base.wKey[7] ^ base.X3);
            base.LT();
            base.Sb2(base.wKey[8] ^ base.X0, base.wKey[9] ^ base.X1, base.wKey[10] ^ base.X2, base.wKey[11] ^ base.X3);
            base.LT();
            base.Sb3(base.wKey[12] ^ base.X0, base.wKey[13] ^ base.X1, base.wKey[14] ^ base.X2, base.wKey[15] ^ base.X3);
            base.LT();
            base.Sb4(base.wKey[0x10] ^ base.X0, base.wKey[0x11] ^ base.X1, base.wKey[0x12] ^ base.X2, base.wKey[0x13] ^ base.X3);
            base.LT();
            base.Sb5(base.wKey[20] ^ base.X0, base.wKey[0x15] ^ base.X1, base.wKey[0x16] ^ base.X2, base.wKey[0x17] ^ base.X3);
            base.LT();
            base.Sb6(base.wKey[0x18] ^ base.X0, base.wKey[0x19] ^ base.X1, base.wKey[0x1a] ^ base.X2, base.wKey[0x1b] ^ base.X3);
            base.LT();
            base.Sb7(base.wKey[0x1c] ^ base.X0, base.wKey[0x1d] ^ base.X1, base.wKey[30] ^ base.X2, base.wKey[0x1f] ^ base.X3);
            base.LT();
            base.Sb0(base.wKey[0x20] ^ base.X0, base.wKey[0x21] ^ base.X1, base.wKey[0x22] ^ base.X2, base.wKey[0x23] ^ base.X3);
            base.LT();
            base.Sb1(base.wKey[0x24] ^ base.X0, base.wKey[0x25] ^ base.X1, base.wKey[0x26] ^ base.X2, base.wKey[0x27] ^ base.X3);
            base.LT();
            base.Sb2(base.wKey[40] ^ base.X0, base.wKey[0x29] ^ base.X1, base.wKey[0x2a] ^ base.X2, base.wKey[0x2b] ^ base.X3);
            base.LT();
            base.Sb3(base.wKey[0x2c] ^ base.X0, base.wKey[0x2d] ^ base.X1, base.wKey[0x2e] ^ base.X2, base.wKey[0x2f] ^ base.X3);
            base.LT();
            base.Sb4(base.wKey[0x30] ^ base.X0, base.wKey[0x31] ^ base.X1, base.wKey[50] ^ base.X2, base.wKey[0x33] ^ base.X3);
            base.LT();
            base.Sb5(base.wKey[0x34] ^ base.X0, base.wKey[0x35] ^ base.X1, base.wKey[0x36] ^ base.X2, base.wKey[0x37] ^ base.X3);
            base.LT();
            base.Sb6(base.wKey[0x38] ^ base.X0, base.wKey[0x39] ^ base.X1, base.wKey[0x3a] ^ base.X2, base.wKey[0x3b] ^ base.X3);
            base.LT();
            base.Sb7(base.wKey[60] ^ base.X0, base.wKey[0x3d] ^ base.X1, base.wKey[0x3e] ^ base.X2, base.wKey[0x3f] ^ base.X3);
            base.LT();
            base.Sb0(base.wKey[0x40] ^ base.X0, base.wKey[0x41] ^ base.X1, base.wKey[0x42] ^ base.X2, base.wKey[0x43] ^ base.X3);
            base.LT();
            base.Sb1(base.wKey[0x44] ^ base.X0, base.wKey[0x45] ^ base.X1, base.wKey[70] ^ base.X2, base.wKey[0x47] ^ base.X3);
            base.LT();
            base.Sb2(base.wKey[0x48] ^ base.X0, base.wKey[0x49] ^ base.X1, base.wKey[0x4a] ^ base.X2, base.wKey[0x4b] ^ base.X3);
            base.LT();
            base.Sb3(base.wKey[0x4c] ^ base.X0, base.wKey[0x4d] ^ base.X1, base.wKey[0x4e] ^ base.X2, base.wKey[0x4f] ^ base.X3);
            base.LT();
            base.Sb4(base.wKey[80] ^ base.X0, base.wKey[0x51] ^ base.X1, base.wKey[0x52] ^ base.X2, base.wKey[0x53] ^ base.X3);
            base.LT();
            base.Sb5(base.wKey[0x54] ^ base.X0, base.wKey[0x55] ^ base.X1, base.wKey[0x56] ^ base.X2, base.wKey[0x57] ^ base.X3);
            base.LT();
            base.Sb6(base.wKey[0x58] ^ base.X0, base.wKey[0x59] ^ base.X1, base.wKey[90] ^ base.X2, base.wKey[0x5b] ^ base.X3);
            base.LT();
            base.Sb7(base.wKey[0x5c] ^ base.X0, base.wKey[0x5d] ^ base.X1, base.wKey[0x5e] ^ base.X2, base.wKey[0x5f] ^ base.X3);
            base.LT();
            base.Sb0(base.wKey[0x60] ^ base.X0, base.wKey[0x61] ^ base.X1, base.wKey[0x62] ^ base.X2, base.wKey[0x63] ^ base.X3);
            base.LT();
            base.Sb1(base.wKey[100] ^ base.X0, base.wKey[0x65] ^ base.X1, base.wKey[0x66] ^ base.X2, base.wKey[0x67] ^ base.X3);
            base.LT();
            base.Sb2(base.wKey[0x68] ^ base.X0, base.wKey[0x69] ^ base.X1, base.wKey[0x6a] ^ base.X2, base.wKey[0x6b] ^ base.X3);
            base.LT();
            base.Sb3(base.wKey[0x6c] ^ base.X0, base.wKey[0x6d] ^ base.X1, base.wKey[110] ^ base.X2, base.wKey[0x6f] ^ base.X3);
            base.LT();
            base.Sb4(base.wKey[0x70] ^ base.X0, base.wKey[0x71] ^ base.X1, base.wKey[0x72] ^ base.X2, base.wKey[0x73] ^ base.X3);
            base.LT();
            base.Sb5(base.wKey[0x74] ^ base.X0, base.wKey[0x75] ^ base.X1, base.wKey[0x76] ^ base.X2, base.wKey[0x77] ^ base.X3);
            base.LT();
            base.Sb6(base.wKey[120] ^ base.X0, base.wKey[0x79] ^ base.X1, base.wKey[0x7a] ^ base.X2, base.wKey[0x7b] ^ base.X3);
            base.LT();
            base.Sb7(base.wKey[0x7c] ^ base.X0, base.wKey[0x7d] ^ base.X1, base.wKey[0x7e] ^ base.X2, base.wKey[0x7f] ^ base.X3);
            Pack.UInt32_To_LE((uint) (base.wKey[0x80] ^ base.X0), output, outOff);
            Pack.UInt32_To_LE((uint) (base.wKey[0x81] ^ base.X1), output, outOff + 4);
            Pack.UInt32_To_LE((uint) (base.wKey[130] ^ base.X2), output, outOff + 8);
            Pack.UInt32_To_LE((uint) (base.wKey[0x83] ^ base.X3), output, outOff + 12);
        }

        protected override int[] MakeWorkingKey(byte[] key)
        {
            int[] sourceArray = new int[0x10];
            int off = 0;
            int index = 0;
            off = 0;
            while ((off + 4) < key.Length)
            {
                sourceArray[index++] = (int) Pack.LE_To_UInt32(key, off);
                off += 4;
            }
            if ((off % 4) != 0)
            {
                throw new ArgumentException("key must be a multiple of 4 bytes");
            }
            sourceArray[index++] = (int) Pack.LE_To_UInt32(key, off);
            if (index < 8)
            {
                sourceArray[index] = 1;
            }
            int num3 = 0x84;
            int[] destinationArray = new int[num3];
            for (int i = 8; i < 0x10; i++)
            {
                sourceArray[i] = SerpentEngineBase.RotateLeft(((((sourceArray[i - 8] ^ sourceArray[i - 5]) ^ sourceArray[i - 3]) ^ sourceArray[i - 1]) ^ -1640531527) ^ (i - 8), 11);
            }
            Array.Copy(sourceArray, 8, destinationArray, 0, 8);
            for (int j = 8; j < num3; j++)
            {
                destinationArray[j] = SerpentEngineBase.RotateLeft(((((destinationArray[j - 8] ^ destinationArray[j - 5]) ^ destinationArray[j - 3]) ^ destinationArray[j - 1]) ^ -1640531527) ^ j, 11);
            }
            base.Sb3(destinationArray[0], destinationArray[1], destinationArray[2], destinationArray[3]);
            destinationArray[0] = base.X0;
            destinationArray[1] = base.X1;
            destinationArray[2] = base.X2;
            destinationArray[3] = base.X3;
            base.Sb2(destinationArray[4], destinationArray[5], destinationArray[6], destinationArray[7]);
            destinationArray[4] = base.X0;
            destinationArray[5] = base.X1;
            destinationArray[6] = base.X2;
            destinationArray[7] = base.X3;
            base.Sb1(destinationArray[8], destinationArray[9], destinationArray[10], destinationArray[11]);
            destinationArray[8] = base.X0;
            destinationArray[9] = base.X1;
            destinationArray[10] = base.X2;
            destinationArray[11] = base.X3;
            base.Sb0(destinationArray[12], destinationArray[13], destinationArray[14], destinationArray[15]);
            destinationArray[12] = base.X0;
            destinationArray[13] = base.X1;
            destinationArray[14] = base.X2;
            destinationArray[15] = base.X3;
            base.Sb7(destinationArray[0x10], destinationArray[0x11], destinationArray[0x12], destinationArray[0x13]);
            destinationArray[0x10] = base.X0;
            destinationArray[0x11] = base.X1;
            destinationArray[0x12] = base.X2;
            destinationArray[0x13] = base.X3;
            base.Sb6(destinationArray[20], destinationArray[0x15], destinationArray[0x16], destinationArray[0x17]);
            destinationArray[20] = base.X0;
            destinationArray[0x15] = base.X1;
            destinationArray[0x16] = base.X2;
            destinationArray[0x17] = base.X3;
            base.Sb5(destinationArray[0x18], destinationArray[0x19], destinationArray[0x1a], destinationArray[0x1b]);
            destinationArray[0x18] = base.X0;
            destinationArray[0x19] = base.X1;
            destinationArray[0x1a] = base.X2;
            destinationArray[0x1b] = base.X3;
            base.Sb4(destinationArray[0x1c], destinationArray[0x1d], destinationArray[30], destinationArray[0x1f]);
            destinationArray[0x1c] = base.X0;
            destinationArray[0x1d] = base.X1;
            destinationArray[30] = base.X2;
            destinationArray[0x1f] = base.X3;
            base.Sb3(destinationArray[0x20], destinationArray[0x21], destinationArray[0x22], destinationArray[0x23]);
            destinationArray[0x20] = base.X0;
            destinationArray[0x21] = base.X1;
            destinationArray[0x22] = base.X2;
            destinationArray[0x23] = base.X3;
            base.Sb2(destinationArray[0x24], destinationArray[0x25], destinationArray[0x26], destinationArray[0x27]);
            destinationArray[0x24] = base.X0;
            destinationArray[0x25] = base.X1;
            destinationArray[0x26] = base.X2;
            destinationArray[0x27] = base.X3;
            base.Sb1(destinationArray[40], destinationArray[0x29], destinationArray[0x2a], destinationArray[0x2b]);
            destinationArray[40] = base.X0;
            destinationArray[0x29] = base.X1;
            destinationArray[0x2a] = base.X2;
            destinationArray[0x2b] = base.X3;
            base.Sb0(destinationArray[0x2c], destinationArray[0x2d], destinationArray[0x2e], destinationArray[0x2f]);
            destinationArray[0x2c] = base.X0;
            destinationArray[0x2d] = base.X1;
            destinationArray[0x2e] = base.X2;
            destinationArray[0x2f] = base.X3;
            base.Sb7(destinationArray[0x30], destinationArray[0x31], destinationArray[50], destinationArray[0x33]);
            destinationArray[0x30] = base.X0;
            destinationArray[0x31] = base.X1;
            destinationArray[50] = base.X2;
            destinationArray[0x33] = base.X3;
            base.Sb6(destinationArray[0x34], destinationArray[0x35], destinationArray[0x36], destinationArray[0x37]);
            destinationArray[0x34] = base.X0;
            destinationArray[0x35] = base.X1;
            destinationArray[0x36] = base.X2;
            destinationArray[0x37] = base.X3;
            base.Sb5(destinationArray[0x38], destinationArray[0x39], destinationArray[0x3a], destinationArray[0x3b]);
            destinationArray[0x38] = base.X0;
            destinationArray[0x39] = base.X1;
            destinationArray[0x3a] = base.X2;
            destinationArray[0x3b] = base.X3;
            base.Sb4(destinationArray[60], destinationArray[0x3d], destinationArray[0x3e], destinationArray[0x3f]);
            destinationArray[60] = base.X0;
            destinationArray[0x3d] = base.X1;
            destinationArray[0x3e] = base.X2;
            destinationArray[0x3f] = base.X3;
            base.Sb3(destinationArray[0x40], destinationArray[0x41], destinationArray[0x42], destinationArray[0x43]);
            destinationArray[0x40] = base.X0;
            destinationArray[0x41] = base.X1;
            destinationArray[0x42] = base.X2;
            destinationArray[0x43] = base.X3;
            base.Sb2(destinationArray[0x44], destinationArray[0x45], destinationArray[70], destinationArray[0x47]);
            destinationArray[0x44] = base.X0;
            destinationArray[0x45] = base.X1;
            destinationArray[70] = base.X2;
            destinationArray[0x47] = base.X3;
            base.Sb1(destinationArray[0x48], destinationArray[0x49], destinationArray[0x4a], destinationArray[0x4b]);
            destinationArray[0x48] = base.X0;
            destinationArray[0x49] = base.X1;
            destinationArray[0x4a] = base.X2;
            destinationArray[0x4b] = base.X3;
            base.Sb0(destinationArray[0x4c], destinationArray[0x4d], destinationArray[0x4e], destinationArray[0x4f]);
            destinationArray[0x4c] = base.X0;
            destinationArray[0x4d] = base.X1;
            destinationArray[0x4e] = base.X2;
            destinationArray[0x4f] = base.X3;
            base.Sb7(destinationArray[80], destinationArray[0x51], destinationArray[0x52], destinationArray[0x53]);
            destinationArray[80] = base.X0;
            destinationArray[0x51] = base.X1;
            destinationArray[0x52] = base.X2;
            destinationArray[0x53] = base.X3;
            base.Sb6(destinationArray[0x54], destinationArray[0x55], destinationArray[0x56], destinationArray[0x57]);
            destinationArray[0x54] = base.X0;
            destinationArray[0x55] = base.X1;
            destinationArray[0x56] = base.X2;
            destinationArray[0x57] = base.X3;
            base.Sb5(destinationArray[0x58], destinationArray[0x59], destinationArray[90], destinationArray[0x5b]);
            destinationArray[0x58] = base.X0;
            destinationArray[0x59] = base.X1;
            destinationArray[90] = base.X2;
            destinationArray[0x5b] = base.X3;
            base.Sb4(destinationArray[0x5c], destinationArray[0x5d], destinationArray[0x5e], destinationArray[0x5f]);
            destinationArray[0x5c] = base.X0;
            destinationArray[0x5d] = base.X1;
            destinationArray[0x5e] = base.X2;
            destinationArray[0x5f] = base.X3;
            base.Sb3(destinationArray[0x60], destinationArray[0x61], destinationArray[0x62], destinationArray[0x63]);
            destinationArray[0x60] = base.X0;
            destinationArray[0x61] = base.X1;
            destinationArray[0x62] = base.X2;
            destinationArray[0x63] = base.X3;
            base.Sb2(destinationArray[100], destinationArray[0x65], destinationArray[0x66], destinationArray[0x67]);
            destinationArray[100] = base.X0;
            destinationArray[0x65] = base.X1;
            destinationArray[0x66] = base.X2;
            destinationArray[0x67] = base.X3;
            base.Sb1(destinationArray[0x68], destinationArray[0x69], destinationArray[0x6a], destinationArray[0x6b]);
            destinationArray[0x68] = base.X0;
            destinationArray[0x69] = base.X1;
            destinationArray[0x6a] = base.X2;
            destinationArray[0x6b] = base.X3;
            base.Sb0(destinationArray[0x6c], destinationArray[0x6d], destinationArray[110], destinationArray[0x6f]);
            destinationArray[0x6c] = base.X0;
            destinationArray[0x6d] = base.X1;
            destinationArray[110] = base.X2;
            destinationArray[0x6f] = base.X3;
            base.Sb7(destinationArray[0x70], destinationArray[0x71], destinationArray[0x72], destinationArray[0x73]);
            destinationArray[0x70] = base.X0;
            destinationArray[0x71] = base.X1;
            destinationArray[0x72] = base.X2;
            destinationArray[0x73] = base.X3;
            base.Sb6(destinationArray[0x74], destinationArray[0x75], destinationArray[0x76], destinationArray[0x77]);
            destinationArray[0x74] = base.X0;
            destinationArray[0x75] = base.X1;
            destinationArray[0x76] = base.X2;
            destinationArray[0x77] = base.X3;
            base.Sb5(destinationArray[120], destinationArray[0x79], destinationArray[0x7a], destinationArray[0x7b]);
            destinationArray[120] = base.X0;
            destinationArray[0x79] = base.X1;
            destinationArray[0x7a] = base.X2;
            destinationArray[0x7b] = base.X3;
            base.Sb4(destinationArray[0x7c], destinationArray[0x7d], destinationArray[0x7e], destinationArray[0x7f]);
            destinationArray[0x7c] = base.X0;
            destinationArray[0x7d] = base.X1;
            destinationArray[0x7e] = base.X2;
            destinationArray[0x7f] = base.X3;
            base.Sb3(destinationArray[0x80], destinationArray[0x81], destinationArray[130], destinationArray[0x83]);
            destinationArray[0x80] = base.X0;
            destinationArray[0x81] = base.X1;
            destinationArray[130] = base.X2;
            destinationArray[0x83] = base.X3;
            return destinationArray;
        }
    }
}

